import unittest
from src.Asymmetric import Asymmetric


class AsymmetricTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.asymmetric = Asymmetric()

    def testGenerateKeys(self):
        result = self.asymmetric.generateKeys()
        self.assertIsNotNone(result)

    def testGenerateAndSetKeys(self):
        privateKey, publicKey = self.asymmetric.generateKeys()
        print(privateKey, publicKey)
        result = self.asymmetric.setKeys(privateKey, publicKey)
        self.assertTrue(result)

    def testGetKeysInHex(self):
        privateKey, publicKey = self.asymmetric.generateKeys()
        self.asymmetric.setKeys(privateKey, publicKey)
        keys = self.asymmetric.getKeysInHex()
        print(keys["privateKeyHex"])
        print(keys["publicKeyHex"])
        self.assertIsNotNone(keys)

    def testSetKeysFomHex(self):
        result = self.asymmetric.setKeysFromHex(
            '2d2d2d2d2d424547494e205253412050524956415445204b45592d2d2d2d2d0a4d4949456f77494241414b43415145416d7648375430747156586f2f6f38326f795a466c78416e6d394b765173304b62764f5833764d4630346f4d415741666c0a4274496c72384c35653046706e326155507a4e465a397055354841497476734e4c2f322b70396a47647938424e327a2b52516d5744536b4357544f6b546b2f4e0a5272634c4d73645733445a2f66563562426377626239347368535741452b35684b6d655443676838502b492f756865764133506b6f39746c547331786452724a0a4f764839564a6e30324451525444736770686f54706b6f666b7a62693779305647465a6138723252596c434c646b43466745506b6e47573758485856395965420a337a46454d746d34386178526370657579355036304a4831315079744253536b4e4977516f556e44354b2f35306c49756b7a6963336238456f466452596754450a717a5577543477503475466d3134754e5139694c4159422b436576454d784f6e4f6547745151494441514142416f494241466646766b775439352b47536569370a78754b775a38716570574e797452336e484a767356654e7158354531446f765070524378474d4978472b79546949625173436742486b3850596b6d706f5859750a547a456864394254503149696f586a4a57467935616e503443436d4a314969384d6866643977304432524f5546374a6f4d66336475716b7258574c72644674570a44567264493346716a79414e52585a676c6a624a66767248664f4d66496f4936526c515438767442777639672b442b386f79753045787442536d597031586c690a70664c724b664877452f46474a484b614352595a50336334536e6f5063722f7a456f6c726839502f43464d34303561364e566957572f5971414f707435516d570a37593035554373624456593556632f6a2b654134396f63564e3957302b54794137434762395258754c576c61784d6d6c72637261477561643941544c7277656f0a6534764d45645543675945417833736f6d502f766c584d4f3567496c314373364f307253634a5a56473030496669324e6e625a30493537722b3151324b46486b0a4873746f506764646e6d666a3548425a7430653548545479314d4452534d74477234425757636c7871334d61787635354f35526c67352b63306b53776b55494a0a734d38585131676136744d30496b6b4b49526a634347506361324245425846674c4568655977775a326f696b626438786461336a314d634367594541787469490a4273574732582b77626a4f665835397a42716a365833454c6331613861786548476739624a776f4d6c66396345657557414b4c305a5379487534534e484754380a412f4978304c514873744c4653772b2b76316f714e73775366363636676530456f5650476a647655733348385278416f4e535062506c336a74715a512f37626d0a79666f454e66744b415850677150724e4a3232456832415150544a46536c6a3958474d7431626343675945416767764c637274666b4e6d367537356f745149640a61327769397830366a4a72537a3565592f466c6e4b35572b6d464856494d494b617630476a33477a326349323873552f35396d4e562f6f643251392f494f724d0a775474306b414a6735586f623265457158656f6e7141435664777371355066645933514f34577439324e7370344c516e4d3136476937323268425831496d74410a58483474636e73414739543742566e3958342b6d755238436759416558594b6f5268484a7451346b5267335964476b4559316d59715a4b75456c6a446f64776e0a7871434d3361502b592f6954592f364d4b6c5a582f4f7a645865694f705830327651324f61572b6a687a784a736958573474582f65447036395276574b3350420a6a79474c47443772434555574e516c7531414c76437a647939514c3569647a456930474a584d3534576c47386646424837526d4838737549444e3033395537370a684d6e4445514b4267466644727a45476a4936784241714f354179786b5172676f4656444c323543494d686c7061717676696a4464676b6547654170496436720a457a5068616b35333452584543566958535a6d347342327751386366554858692f65494877524d39756c35712f7a62565533436a3672524642304f377451735a0a50304c6e6b6c394d545332477139503637446e3555573661326d4c6b346f3039314f4b616d61797453713944737a467063534d4d0a2d2d2d2d2d454e44205253412050524956415445204b45592d2d2d2d2d0a',
            '2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b43415145416d7648375430747156586f2f6f38326f795a466c0a78416e6d394b765173304b62764f5833764d4630346f4d415741666c4274496c72384c35653046706e326155507a4e465a397055354841497476734e4c2f322b0a70396a47647938424e327a2b52516d5744536b4357544f6b546b2f4e5272634c4d73645733445a2f66563562426377626239347368535741452b35684b6d65540a43676838502b492f756865764133506b6f39746c547331786452724a4f764839564a6e30324451525444736770686f54706b6f666b7a62693779305647465a610a38723252596c434c646b43466745506b6e4757375848585639596542337a46454d746d34386178526370657579355036304a4831315079744253536b4e4977510a6f556e44354b2f35306c49756b7a6963336238456f46645259675445717a5577543477503475466d3134754e5139694c4159422b436576454d784f6e4f6547740a51514944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a')
        keys = self.asymmetric.getKeysInHex()
        print(keys["privateKeyHex"])
        print(keys["publicKeyHex"])
        self.assertTrue(result)

    def testEncryptAndDecrypt(self):
        privateKey, publicKey = self.asymmetric.generateKeys()
        self.asymmetric.setKeys(privateKey, publicKey)
        encrypted = self.asymmetric.encrypt('Eragon Bromsson')
        decrypted = self.asymmetric.decrypt(encrypted)
        self.assertEqual('Eragon Bromsson', decrypted)

    def testEncryptAndDecryptFail(self):
        privateKey, publicKey = self.asymmetric.generateKeys()
        self.asymmetric.setKeys(privateKey, publicKey)
        encrypted = self.asymmetric.encrypt('Eragon Bromsson')
        decrypted = self.asymmetric.decrypt(encrypted)
        self.assertNotEqual('Murtagh Morzansson', decrypted)

    def testSignAndVerifyTrue(self):
        privateKey, publicKey = self.asymmetric.generateKeys()
        self.asymmetric.setKeys(privateKey, publicKey)
        message = 'Saphira Bjartskular'
        signed = self.asymmetric.sign(message)
        result = self.asymmetric.verify(message, signed)
        self.assertTrue(result)

    def testSignAndVerifyFalse(self):
        privateKey, publicKey = self.asymmetric.generateKeys()
        self.asymmetric.setKeys(privateKey, publicKey)
        message = 'Saphira Bjartskular'
        signed = self.asymmetric.sign(message)
        message = 'Shruikan Bjartskular'
        result = self.asymmetric.verify(message, signed)
        self.assertFalse(result)


if __name__ == '__main__':
    unittest.main()
